BootStrap: docker
From: ubuntu:22.04  

%help
    Build a portable version of OASIS3-MCT
    
%environment

    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    export PATH=/usr/local/bin:$PATH

    # Make sure we have reasonable default paths
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

    # OASIS3-MCT
    export COUPLE=/usr/local/build/oasis3-mct
    export ARCHDIR=/usr/local/oasis3-mct/build-static


%post

    # versions
    HDF5_VERSION="1.12.2"
    NETCDF_C_VERSION="4.9.2"
    NETCDF_FORTRAN_VERSION="4.6.1"
    FYAML_VERSION="0.9"
    YAXT_VERSION="0.11.3"
    export BUILD_DIR=/usr/local/build
    export INSTALL_DIR=/usr/local/
    export PATH=${INSTALL_DIR}/bin:$PATH
    export LD_LIBRARY_PATH=${INSTALL_DIR}/lib:$LD_LIBRARY_PATH


    apt-get update && apt-get upgrade -y
    
    # from https://github.com/nesi/openmpi-apptainer/blob/main/openmpi-4.1.5.def
    apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        wget \
        git \
        tar \
        gzip \
        perl \
        python3 libpython3-dev python3-pip \
        python-is-python3 \
        automake \
        autoconf \
        libtool \
        flex \
        hwloc \
        pkg-config \
        zlib1g-dev \
        libssl-dev \
        openssl \
        gfortran \
        cmake \
        vim \
        libtool \
        curl \
        libcurl4-openssl-dev \
        libxml2-dev \
        gdb \
        liblapack-dev \
        valgrind \
        libmpich-dev mpich  \
        libltdl-dev pkg-config libyaml-dev check \
         && rm -rf /var/lib/apt/lists/*

    # python packages
    pip3 install numpy
    pip3 install mpi4py

    export MPIF90=mpif90
    export MPICC=mpicc
    export MPICXX=mpic++

    mkdir $BUILD_DIR

    # hdf5
    cd $BUILD_DIR
    HDF5_VERSION_SHORT=$(echo $HDF5_VERSION | awk -F '.' '{print $1"."$2}')
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION_SHORT}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz
    tar xf hdf5-${HDF5_VERSION}.tar.gz
    cd hdf5-${HDF5_VERSION}
    mkdir build
    cd build
    which $MPICC
    $MPICC --version
    CC=$MPICC FC=$MPIF90 ../configure --prefix=$INSTALL_DIR --enable-parallel --enable-fortran
    make -j 4
    make install
    cd ../..
    rm -rf hdf5-${HDF5_VERSION}*
    ls -l ${INSTALL_DIR}/lib
    ls -l ${INSTALL_DIR}/include
    ls -l ${INSTALL_DIR}/bin

    # netcdf-c
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-c/${NETCDF_C_VERSION}/netcdf-c-${NETCDF_C_VERSION}.tar.gz
    tar xf netcdf-c-${NETCDF_C_VERSION}.tar.gz
    cd netcdf-c-${NETCDF_C_VERSION}
    mkdir build
    cd build
    CPPFLAGS="-I${INSTALL_DIR}/include" \
    LDFLAGS="-L${INSTALL_DIR}/lib -lhdf5 -lhdf5_hl" \
    CC=$MPICC CXX=$MPICXX FC=$MPIF90 ../configure --prefix=$INSTALL_DIR
    make -j 4
    make install
    cd ../..
    rm -rf netcdf-c-${NETCDF_C_VERSION}*
    ls -l ${INSTALL_DIR}/lib
    ls -l ${INSTALL_DIR}/include
    ls -l ${INSTALL_DIR}/bin

    # netcdf-fortran
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-fortran/${NETCDF_FORTRAN_VERSION}/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
    tar xf netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
    cd netcdf-fortran-${NETCDF_FORTRAN_VERSION}
    mkdir build
    cd build
    CPPFLAGS="$(${INSTALL_DIR}/bin/nc-config --cflags)" LDFLAGS="$(${INSTALL_DIR}/bin/nc-config --libs)" \
    ../configure --prefix=$INSTALL_DIR
    make
    make install
    cd ../..
    rm -rf netcdf-fortran-${NETCDF_FORTRAN_VERSION}*
    ls -l ${INSTALL_DIR}/lib
    ls -l ${INSTALL_DIR}/include
    ls -l ${INSTALL_DIR}/bin

    # yaxt
    cd $BUILD_DIR
    wget https://swprojects.dkrz.de/redmine/attachments/download/541/yaxt-${YAXT_VERSION}.tar.gz
    tar xf yaxt-${YAXT_VERSION}.tar.gz
    cd yaxt-${YAXT_VERSION}
    mkdir build
    cd build
    FC=$MPIF90 CC=$MPICC ../configure --prefix=$INSTALL_DIR --without-regard-for-quality
    make -j 4
    make install
    cd ../..
    rm -rf yaxt-${YAXT_VERSION}*
    ls -l ${INSTALL_DIR}/lib
    ls -l ${INSTALL_DIR}/include
    ls -l ${INSTALL_DIR}/bin

    # fyaml
    cd $BUILD_DIR
    wget https://github.com/pantoniou/libfyaml/archive/refs/tags/v${FYAML_VERSION}.tar.gz
    tar xf v${FYAML_VERSION}.tar.gz
    cd libfyaml-${FYAML_VERSION}
    ./bootstrap.sh
    CC=$MPICC ./configure --prefix=$INSTALL_DIR
    make
    make install 
    cd ..
    rm -rf libfyaml-${FYAML_VERSION} v${FYAML_VERSION}.tar.gz
    ls -l ${INSTALL_DIR}/lib
    ls -l ${INSTALL_DIR}/include
    ls -l ${INSTALL_DIR}/bin

    # YAC
    cd $BUILD_DIR
    git clone https://gitlab.dkrz.de/dkrz-sw/yac.git
    cd yac
    git checkout tags/v3.5.2
    mkdir build
    cd build
    FC=$MPIF90 CC=$MPICC MPI_LAUNCH=mpiexec ../configure --prefix=$INSTALL_DIR --disable-mpi-checks
    make -j 4
    make install
    cd ../../
    rm -rf yac
    ls -l ${INSTALL_DIR}/lib
    ls -l ${INSTALL_DIR}/include
    ls -l ${INSTALL_DIR}/bin

    # oasis3-mct
    cd $BUILD_DIR
    git clone https://gitlab.com/cerfacs/oasis3-mct.git
    cd oasis3-mct
    git fetch --all
    git checkout OASIS3-MCT_5.2
    # absolute path where the source resides
    export COUPLE=$PWD
    export OASIS_COUPLE=$COUPLE
    # directory where the mods and libs will be installed
    export ARCHDIR=${INSTALL_DIR}/oasis3-mct
    cd util/make_dir
    mv make.inc make.inc.ori
    echo 'include $(COUPLE)/util/make_dir/make.gcc' > make.inc
    wget https://raw.githubusercontent.com/pletzer/nextsimroms_apptainer/refs/heads/main/packages/oasis3-mct/make.gcc
    cat make.gcc
    cat make.inc
    make -f TopMakefileOasis3 static-libs
    make -f TopMakefileOasis3 shared-libs
    make -f TopMakefileOasis3 pyoasis
    # debug version
    export OASIS_DEBUG=1
    export ARCHDIR=${INSTALL_DIR}/oasis3-mct/debug
    make -f TopMakefileOasis3 static-libs
    make -f TopMakefileOasis3 shared-libs
     

    